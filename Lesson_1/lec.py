# print('Hello world')
# типы данных и переменная
# int, float, boolean, str, list, None

# value = None
# #print(type(value))
# a = 123
# b = 1.23
# #print(type(a))
# #print(type(b))
# value = 12334
#print(type(value))
# s = 'hello world'
#print(s)
# print(a,b,s) # вывод с интерполяцией 
# print(a,'-',b,'-',s) # вывод с интерполяцией и вставками между переменными
# print('{1} - {2} - {0}'.format(a,b,s)) # вывод с интерполяцией и вставками между переменными через формат, если в {} указать индекс аргумента, то порядок вывода поменяется
# print(f'{a} - {b} - {s}') # вывод с интерполяцией и вставками между переменными через f в начале

# f = True
# print(f)

# list = [1,2,3, '1'] # В пайтоне используют списки вместо массивов, допускается хранить в списке данные разных типов int-str и т.д., но крайне не рекомендуется
# print(list)

# print() # - отвечает за ввыод данных
# input() # - отвечает за ввод данных

#print('Введите а')
#a = input()
#print('Введите b')
#b = input()
#print(a,b)
#print('{} {}'.format(a,b))
#print(f'{a} {b}')
#print(a, ' + ', b, ' = ', a+b)  # т.к. на ввод принимается тип данных str, то при выполненении a+b происходит конкатенация строк, для того, что бы произвести 
                                # суммирование переменных их нужно предопределить следующим образом

# print('Введите а')
# a = int(input())            # с помощью int() предопределили принимаемы тип данных, тоже самое для float
# print('Введите b')
# b = int(input())
# print(a, ' + ', b, ' = ', a+b)

# Арефметические операции
# +, -, /, %, //, **
# **,
# (), Сокращенные операции
# a = 1.3
# b = 3
# c = round(a*b)
# print(c)
# При выполнении дленения с оператором "/" происходит деление с использованием вещественных чисел (т.е. 12/8=1,5)
# Для проведения деления с использование целых чисел, нужно использовать оператор "//" (12//8=1) 
# Для возведение в степень используется оператор "**"
# функция round() округляет число по математическому правилу, можно в качестве агрумента указать - до скольки знаков округлить
# round(a*b, 3) где a=1.3123 b=3 c=round(a*b, 3) будет давать 3.9369 
# сокращенные операции (+=, *=) и т.д.
# 
# ЛОГИЧЕСКИЕ ОПЕРАЦИИ 
# >,>=, <, <=, ==, !=
# not, and, or - не путать с &, |, ^
# is, is not, in, not in
# gen
# a = 1 < 4 and 5 > 2 
# print(a)

# В Пайтон можно использовать тройные и четвертные неравенства
# a = 1 < 3 < 5
# print(a) # //True

# f = 1 > 2 or 4 < 6 # // True Потому что "ИЛИ(or)" правдиво тогда и только тогда, когда одно из высказываний истино (в данном случае 4<6) 
# print(f)

# f = [1,2,3,4]
# print(f)
# print(2 in f) # // True Потому что 2 содержится в списке f (в первом элементе списка)
# print(not 2 in f) # // False Операция отрицания (нет 2 в f) Ложь, потому что 2 содержится в списке

# is_odd = f[0]%2 == 0
# print(is_odd) # // False т.к. в списке под 0 индексом храниться 1 при делении на 2 остататок не будет равняться 0

# is_odd = not f[0] % 2
# print(is_odd) # // False Более правильная проверка на четность в пайтене, т.к. f[0]%2 = 1, производя отрицание (not) единицы получаем 0, 0 - является ложью, 1- является истиной, т.к. 0, то на выход получаем ложь.

# Упраляющие конструкции if, if else

# if
# if условие: (скобки ставить не обязательно)
#     оператор 1      (обязательно сделать отступ(табуляцию)) для каждого оператора
#     оператор 2
#     ...
#     оператор n
# else:
#     оператор n+1
#     оператор n+2
#     ...
#     оператор n+m

# a = int(input('a = '))  # Приглащение ко вводу. В аргументе сразу прописано сообщение пользователю, о том что он будет вводить а=
# b = int(input('b = '))
# if a > b:               # условие
#     print(a)            # оператор выводит а если условие true
# else:                   # если условие false то выполняется этот блок кода
#     print(b)            # вывод b

# if-else
# if условие1:
#     оператор1
# elif условие2:
#     оператор2
# elif условие3:
#     оператор3
# else:
#     оператор4

# username = input('Ваше имя: ')
# if username == 'Маша':
#     print('Ура то же Маша!')
# elif username == 'Марина':
#     print('Я так ждала Вас, Марина')
# elif username == 'Ильнар':
#     print('Ильнар - топ')
# else:
#     print('Привет,', username,'!')

# ЦИКЛЫ 

# while

# while условие:
#     блок кода цикла  (Так же важно сделать отступ в блоке кода)

#МЕТОД(ФУНКЦИЯ) РАЗВОРОТА ЧИСЛА через цикл while
# original = 123
# inverted = 0
# while original !=0:
#     inverted = inverted * 10 + (original % 10)
#     original //=10
# print(inverted) # 32 

# while-else
# while условие:
#     блок кода цикла
# else:                     # Начинает выполняться, когда выполнен блок кода цикла и условие цикла true
#     блок кода else

# original = 123
# inverted = 0
# while original !=0:
#     inverted = inverted * 10 + (original % 10)
#     original //=10
# else:
#     print('Пожалуй')
#     print('хватит')
# print(inverted) # 32

# Цикл for
# for i in enumeration      где (i - счетчик) (in - в) (enumeration - итерируемый объект, какой-то список и т.д.) 
#     Блок кода цикла for

# list = [1,2,3,4,5]
# for i in list:
#     print(i**2)

# Работа со строками

text = 'съешь ещё этих мягких французских булок'
print(len(text))                    # 39 Выводит длину строки
print('ещё' in text)                # True Содержится ли указанный аргумент в указанной переменной
print(text.isdigit())               # False Являются ли все символы в строке числами
print(text.islower())               # True Являются ли все символы строки символами нижнего регистра
print(text.replace('ещё', 'ЕЩЁ'))   # Заменяет аргумент 1(Регулярное выражение?) на аргумент 2

text = 'съешь ещё этих мягких французских булок'
print(text[0]) # c Выводит 0 символ строки
print(text[1]) # ъ Выводит 1 символ строки
print(text[len(text)-1]) # к Выводит последний символ строки
#                                                                                               'съешь ещё этих мягких     французски x   б у л о к'
print(text[-5]) # б  выводит символ в обратном отсчете -1 символ будет являться онцом строки     0                                   -7-6-5-4-3-2-1
print(text[:]) # print(text) сокращенная запись от text[0:len(text)-1] выводит всю строку
print(text[:2]) # съ  сокращенная запись от text[0:2] выводит символы от 0 до 1 
print(text[len(text)-2:]) # ок 
print(text[2:9]) # ешь ещё
print(text[6:-18]) # ещё этих мягких 
print(text[0:len(text):6]) # сеикакл
print(text[::6]) # сеикакл